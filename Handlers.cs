using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace TmdbTeleBot;

public static class Handlers
{
    public static async Task ShowMenu(ITelegramBotClient bot, long chatId, CancellationToken cancellationToken)
    {
        Console.WriteLine($"ShowMenu: chatId={chatId}");

        var menu = "üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:\n\n" +
                   "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞\n" +
                   "/top ‚Äî —Ç–æ–ø —Ñ—ñ–ª—å–º—ñ–≤\n" +
                   "/random ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º\n" +
                   "/saved ‚Äî –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏\n" +
                   "/search ‚Äî –ø–æ—à—É–∫ —Ñ—ñ–ª—å–º—ñ–≤";

        await bot.SendMessage(chatId, menu, cancellationToken: cancellationToken);
    }

    public static async Task HandleStart(ITelegramBotClient bot, long chatId, CancellationToken cancellationToken)
    {
        Console.WriteLine($"HandleStart: chatId={chatId}");

        var greeting = "üé¨ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤ —á–µ—Ä–µ–∑ TMDB.\n\n" +
                       "–¢–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º, –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ, –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–±–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n";

        using var httpClient = new HttpClient();
        var response = await httpClient.PostAsJsonAsync("http://localhost:5180/user/save", new { chatId });
        var responseContent = await response.Content.ReadAsStringAsync();
        try
        {
            using var doc = JsonDocument.Parse(responseContent);
            var root = doc.RootElement;

            if (root.TryGetProperty("id", out var idProp) && Guid.TryParse(idProp.GetString(), out var userId))
            {
                UserCache.SetUserId(chatId, userId);
                Console.WriteLine($"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {userId}");
            }
            else
            {
                Console.WriteLine($"‚ö†Ô∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ userId: {responseContent}");
            }
        }
        catch (JsonException)
        {
            Console.WriteLine($"‚ùå JSON parsing error: {responseContent}");
        }

        await bot.SendMessage(chatId, greeting, cancellationToken: cancellationToken);
        await ShowMenu(bot, chatId, cancellationToken);
    }

    public static async Task HandleRandom(ITelegramBotClient bot, long chatId, CancellationToken cancellationToken)
    {
        Console.WriteLine($"HandleRandom: chatId={chatId}");

        using var httpClient = new HttpClient();
        string message = "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—å–º";

        try
        {
            var response = await httpClient.GetAsync("http://localhost:5180/movie/random");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                using var doc = JsonDocument.Parse(json);
                var root = doc.RootElement;

                var title = root.GetProperty("title").GetString();
                var releaseDate = root.GetProperty("release_date").GetString();
                var overview = root.GetProperty("overview").GetString();
                var rating = root.GetProperty("vote_average").GetDecimal();

                message = $"üé¨ <b>{title}</b>\n" +
                          $"üìÖ –†—ñ–∫: {DateTime.Parse(releaseDate).Year}\n" +
                          $"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n" +
                          $"üìù –û–ø–∏—Å: {overview}";
            }
            else
            {
                Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—ñ–ª—å–º—É: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ñ—ñ–ª—å–º—É: {ex.Message}");
        }

        await bot.SendMessage(
            chatId: chatId,
            text: message,
            parseMode: Telegram.Bot.Types.Enums.ParseMode.Html,
            cancellationToken: cancellationToken
        );

        await ShowMenu(bot, chatId, cancellationToken);
    }
    
    public static async Task HandleSearchCommand(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;

        await bot.SendMessage(
            chatId,
            "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É:",
            cancellationToken: cancellationToken
        );
    }
    
    public static async Task HandleTextInput(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
    {
        var chatId = update.Message.Chat.Id;
        var userInput = update.Message.Text;

        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            await bot.SendMessage(chatId, "‚ùó –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ–Ω–∞–π /start", cancellationToken: cancellationToken);
            return;
        }

        using var httpClient = new HttpClient();
        var url = $"http://localhost:5180/search/{userId}?query={Uri.EscapeDataString(userInput)}";
        var response = await httpClient.GetStringAsync(url);

        var json = JsonDocument.Parse(response);
        var movies = json.RootElement.GetProperty("results");

        foreach (var movie in movies.EnumerateArray())
        {
            var id = movie.GetProperty("id").GetInt32();
            var title = movie.GetProperty("title").GetString();
            var rating = movie.GetProperty("vote_average").GetDecimal();
            var year = DateTime.Parse(movie.GetProperty("release_date").GetString() ?? "0001-01-01").Year;
            var overview = movie.GetProperty("overview").GetString();

            var message = $"üé¨ <b>{title}</b> ({year})\n‚≠ê {rating}\nüìù {overview}";

            var keyboard = new InlineKeyboardMarkup(new[]
            {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚ÑπÔ∏è –î–æ–∫–ª–∞–¥–Ω—ñ—à–µ", $"movie_details:{userId}:{id}"),
                    InlineKeyboardButton.WithCallbackData("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", $"movie_save:{userId}:{id}")
                }
            });

            await bot.SendMessage(
                chatId,
                message,
                parseMode: ParseMode.Html,
                replyMarkup: keyboard,
                cancellationToken: cancellationToken
            );
        }
    }

    public static async Task HandleCallbackQuery(ITelegramBotClient bot, Update update, CancellationToken cancellationToken)
    {
        var callback = update.CallbackQuery!;
        var data = callback.Data!;
        var chatId = callback.Message.Chat.Id;

        if (data.StartsWith("movie_details:"))
        {
            var parts = data.Split(':');
            var userId = parts[1];
            var movieId = parts[2];

            var url = $"http://localhost:5180/movies/{userId}/{movieId}";
            var json = await new HttpClient().GetStringAsync(url);
            var movie = JsonDocument.Parse(json).RootElement;

            var msg = $"üé¨ <b>{movie.GetProperty("title").GetString()}</b>\n" +
                      $"üìÖ {movie.GetProperty("release_date").GetString()}\n" +
                      $"‚≠ê {movie.GetProperty("vote_average").GetDecimal()}\n" +
                      $"üìù {movie.GetProperty("overview").GetString()}";

            await bot.SendMessage(chatId, msg, parseMode: ParseMode.Html, cancellationToken: cancellationToken);
        }
        else if (data.StartsWith("movie_save:"))
        {
            var parts = data.Split(':');
            var userId = parts[1];
            var movieId = parts[2];

            var url = $"http://localhost:5180/movies/{userId}/{movieId}";
            var json = await new HttpClient().GetStringAsync(url);

            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var saveUrl = $"http://localhost:5180/movie/{userId}/save";
            var saveResp = await new HttpClient().PostAsync(saveUrl, content);

            var resultMsg = saveResp.IsSuccessStatusCode ? "‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É" : "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏";
            await bot.SendMessage(chatId, resultMsg, cancellationToken: cancellationToken);
        }

        await bot.AnswerCallbackQuery(
            callbackQueryId: callback.Id,
            cancellationToken: cancellationToken
        );
    }
}
