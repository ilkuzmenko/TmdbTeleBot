using System.Net.Http.Json;
using System.Text.Json;
using Telegram.Bot;

namespace TmdbTeleBot.Handlers;

public static class CommandHandlers
{
    private static async Task TryFetchUserId(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
    {
        try
        {
            var response = await HandlerUtils.HttpClient.PostAsJsonAsync($"{apiUrl}/user/save", new { chatId }, cancellationToken: cancellationToken);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync(cancellationToken);
                var root = JsonDocument.Parse(json).RootElement;

                if (root.TryGetProperty("id", out var idProp) && Guid.TryParse(idProp.GetString(), out var userId))
                {
                    UserCache.SetUserId(chatId, userId);
                    Console.WriteLine($"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É: {userId}");
                }
            }
            else
            {
                Console.WriteLine($"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ö–æ–¥: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ userId: {ex.Message}");
        }
    }

    public static async Task HandleStart(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
    {
        var greeting = "üé¨ –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤ —á–µ—Ä–µ–∑ TMDB.\n\n" +
                       "–¢–∏ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º, –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ñ, –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–±–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n";

        await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
        await bot.SendMessage(chatId, greeting, cancellationToken: cancellationToken);
    }

    public static async Task HandleRandom(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
    {
        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/movie/random");
        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ—ñ–ª—å–º", cancellationToken: cancellationToken);
            return;
        }

        var message = HandlerUtils.FormatMovie(json.Value);
        await HandlerUtils.SendMovieWithOptionalPoster(bot, chatId, json.Value, message, cancellationToken);
    }

    public static async Task HandleSearchCommand(ITelegramBotClient bot, long chatId, string apiUrl, CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            Console.WriteLine($"‚ÑπÔ∏è userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ–Ω—É—î–º–æ /start –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–ª—è chatId={chatId}");
            await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
        }

        await bot.SendMessage(chatId, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –¥–ª—è –ø–æ—à—É–∫—É:", cancellationToken: cancellationToken);
    }


    public static async Task HandleTextInput(ITelegramBotClient bot, long chatId, string userInput, string apiUrl, CancellationToken cancellationToken)
    {
        var userId = UserCache.GetUserId(chatId);
        if (userId == null)
        {
            Console.WriteLine($"‚ÑπÔ∏è userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ-—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–ª—è chatId={chatId}");
            await TryFetchUserId(bot, chatId, apiUrl, cancellationToken);
            userId = UserCache.GetUserId(chatId);

            if (userId == null)
            {
                await bot.SendMessage(chatId, "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.", cancellationToken: cancellationToken);
                return;
            }
        }

        var json = await HandlerUtils.GetJsonAsync($"{apiUrl}/search/{userId}?query={Uri.EscapeDataString(userInput)}");

        if (json is null)
        {
            await bot.SendMessage(chatId, "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.", cancellationToken: cancellationToken);
            return;
        }

        var results = json.Value.EnumerateArray().ToList();
        if (!results.Any())
        {
            await bot.SendMessage(chatId, "ü§∑‚Äç‚ôÇÔ∏è –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.", cancellationToken: cancellationToken);
            return;
        }

        foreach (var movie in results)
        {
            var message = HandlerUtils.FormatMovie(movie);
            var movieId = movie.GetProperty("id").GetInt32();
            var keyboard = HandlerUtils.CreateMovieButtons(userId.Value, movieId);

            MovieCache.Set(userId.Value, movieId, movie);

            await HandlerUtils.SendMovieWithOptionalPoster(bot, chatId, movie, message, cancellationToken, keyboard);
        }
    }
}